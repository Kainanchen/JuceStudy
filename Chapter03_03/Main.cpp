/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "JuceStudy.h"


// This macro generates the main() routine that launches the app.
// START_JUCE_APPLICATION (JuceStudyApplication)

int main(int argc, char* argv[])
{
	Logger* log = Logger::getCurrentLogger();
	
	String text("The quick brown fox jumps over the lazy dog.");
	File root(File::getSpecialLocation(File::userDesktopDirectory).getParentDirectory().getChildFile("./chapter03_03_tests"));
	File dir1(root.getChildFile ("1"));
	File dir2(root.getChildFile("2"));
	File dir1a(dir1.getChildFile("a"));
	File dir2b(dir2.getChildFile("b"));
	
	Result result(Result::ok());
	
	result = dir1a.createDirectory();
	
	if (!result.wasOk()) {
		log->writeToLog("Creating dir 1/a failed");
		return -1;
	}
	
	result = dir2b.createDirectory();
	
	if (!result.wasOk()) {
		log->writeToLog ("Creating dir 2/b failed");
		return -1;
	}
	
	File rel = dir1a.getChildFile ("../../2/b");
	
	File file(File::getSpecialLocation(File::currentExecutableFile).getParentDirectory().getChildFile("./chapter03_03_test.txt"));
	
	bool fileExists = file.exists();
	
	if (!fileExists) {
		log->writeToLog("file " + file.getFileName() + " does not exist");
		return -1;
	}
	Time creationTime = file.getCreationTime();
	Time modTime = file.getLastModificationTime();
	int64 size = file.getSize();
	
	file.replaceWithText(text);
	String fileText = file.loadFileAsString();
	log->writeToLog("fileText: " + fileText);
	
	log->writeToLog ("file " +
					 file.getFileName() + " info:");
	log->writeToLog ("created: " +
					 creationTime.toString(true, true, true, true));
	log->writeToLog ("modified:" +
					 modTime.toString(true, true, true, true));
	log->writeToLog ("size:" +
					 String(size) + " bytes");
	log->writeToLog ("file path: " + file.getFullPathName());
	log->writeToLog ("folder path: " + root.getFullPathName());
	log->writeToLog ("dir1: " + dir1.getRelativePathFrom (root));
	log->writeToLog ("dir2: " + dir2.getRelativePathFrom (root));
	log->writeToLog ("dir1a: " + dir1a.getRelativePathFrom (root));
	log->writeToLog ("dir2b: " + dir2b.getRelativePathFrom (root));
	log->writeToLog ("rel: " + rel.getRelativePathFrom (root));
	
	File usrfile = File::getSpecialLocation (File::userDocumentsDirectory);
	Array<File> childFiles;
	bool searchRecursively = false;
	usrfile.findChildFiles(childFiles, File::findFilesAndDirectories, searchRecursively);
	
	for (int i=0; i<childFiles.size(); ++i) {
		log->writeToLog (childFiles[i].getFullPathName());
	}
	
	StringArray strings;
	bool preserveQuoted = true;
	strings.addTokens("one two three four five six", preserveQuoted);
	for (int i=0; i<strings.size(); ++i) {
		log->writeToLog("strings[" + String(i) + "]=" + strings[i]);
	}
	
	return 0;
}